{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TEST_GIFS","TWITTER_HANDLE","TWITTER_LINK","concat","App","_useState","useState","_useState2","_slicedToArray","walletAddress","setWalletAddress","_useState3","_useState4","inputValue","setInputValue","_useState5","_useState6","gifList","setGifList","checkIfWalletIsConnected","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_window","_window$solana","response","wrap","_context","prev","next","window","solana","isPhantom","console","log","connect","onlyIfTrusted","sent","publicKey","toString","alert","stop","apply","arguments","connectWallet","_ref2","_callee2","_window2","_context2","sendGif","_ref3","_callee3","_context3","length","_toConsumableArray","onInputChange","event","value","target","useEffect","onLoad","_ref4","_callee4","_context4","addEventListener","removeEventListener","_jsx","className","children","_jsxs","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","gif","src","alt","twitterLogo","href","rel","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"sPAAe,MAA0B,yC,eCKnCA,EAAY,CACjB,0DACA,sIACA,sIACA,2DAEKC,EAAiB,cACjBC,EAAY,uBAAAC,OAA0BF,GAmI7BG,EAjIH,WAEZ,IAAAC,EAA0CC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAAjDI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GACtCI,EAAoCL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,EAA8BT,mBAAS,IAAGU,EAAAR,YAAAO,EAAA,GAAnCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAGlBG,EAAwB,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,cAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACrB,QADqBN,EAC3BO,cAAM,IAAAP,GAAQ,QAARC,EAAND,EAAQQ,cAAM,IAAAP,IAAdA,EAAgBQ,UAAS,CAAAL,EAAAE,KAAA,QACU,OAArCI,QAAQC,IAAI,yBAAyBP,EAAAE,KAAA,EACdC,OAAOC,OAAOI,QAAQ,CAAEC,eAAe,IAAQ,KAAD,EAA/DX,EAAQE,EAAAU,KACdJ,QAAQC,IACN,6BACAT,EAASa,UAAUC,YAMrB/B,EAAiBiB,EAASa,UAAUC,YAAYZ,EAAAE,KAAA,gBAEhDW,MAAM,8DAAoD,yBAAAb,EAAAc,OAAA,GAAAnB,EAAA,KAE7D,kBAhB6B,OAAAJ,EAAAwB,MAAA,KAAAC,UAAA,KAkBxBC,EAAa,eAAAC,EAAA1B,YAAAC,cAAAC,MAAG,SAAAyB,IAAA,IAAAC,EAAAhB,EAAAN,EAAA,OAAAL,cAAAM,MAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,OACN,GADMkB,EACDjB,SAAXC,EAAMgB,EAANhB,QAEG,CAADiB,EAAAnB,KAAA,eAAAmB,EAAAnB,KAAA,EACeE,EAAOI,UAAU,KAAD,EAAjCV,EAAQuB,EAAAX,KACdJ,QAAQC,IAAI,6BAA8BT,EAASa,UAAUC,YAC7D/B,EAAiBiB,EAASa,UAAUC,YAAY,wBAAAS,EAAAP,OAAA,GAAAK,EAAA,KAEnD,kBARkB,OAAAD,EAAAH,MAAA,KAAAC,UAAA,KASbM,EAAO,eAAAC,EAAA/B,YAAAC,cAAAC,MAAG,SAAA8B,IAAA,OAAA/B,cAAAM,MAAA,SAAA0B,GAAA,cAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,OACVlB,EAAW0C,OAAS,GACtBpB,QAAQC,IAAI,YAAavB,GACzBK,EAAW,GAADf,OAAAqD,YAAKvC,GAAO,CAAEJ,KACxBC,EAAc,KAEdqB,QAAQC,IAAI,2BACb,wBAAAkB,EAAAX,OAAA,GAAAU,EAAA,KACF,kBARY,OAAAD,EAAAR,MAAA,KAAAC,UAAA,KASPY,EAAgB,SAACC,GACrB,IAAQC,EAAUD,EAAME,OAAhBD,MACR7C,EAAc6C,EAChB,EAwDA,OAlBAE,qBAAU,WACR,IAAMC,EAAM,eAAAC,EAAA1C,YAAAC,cAAAC,MAAG,SAAAyC,IAAA,OAAA1C,cAAAM,MAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,cAAAkC,EAAAlC,KAAA,EACPZ,IAA2B,KAAD,mBAAA8C,EAAAtB,OAAA,GAAAqB,EAAA,KACjC,kBAFW,OAAAD,EAAAnB,MAAA,KAAAC,UAAA,KAIZ,OADAb,OAAOkC,iBAAiB,OAAQJ,GACzB,kBAAM9B,OAAOmC,oBAAoB,OAAQL,EAAQ,CAC1D,GAAG,IAEHD,qBAAU,WACJpD,IACF0B,QAAQC,IAAI,wBAKZlB,EAAWlB,GAEf,GAAG,CAACS,IAEF2D,cAAA,OAAKC,UAAU,MAAKC,SAErBC,eAAA,OAAKF,UAAW5D,EAAgB,mBAAqB,YAAY6D,SAAA,CAC5DC,eAAA,OAAKF,UAAU,mBAAkBC,SAAA,CAC/BF,cAAA,KAAGC,UAAU,SAAQC,SAAC,4BACtBF,cAAA,KAAGC,UAAU,WAAUC,SAAC,sDAItB7D,GAhER2D,cAAA,UACEC,UAAU,mCACVG,QAAS1B,EAAcwB,SACxB,sBA8DM7D,GAzDP8D,eAAA,OAAKF,UAAU,sBAAqBC,SAAA,CAClCC,eAAA,QACEE,SAAU,SAACf,GACTA,EAAMgB,iBACNvB,GACF,EAAEmB,SAAA,CAEFF,cAAA,SACEO,KAAK,OACLC,YAAY,kBACZjB,MAAO9C,EACPgE,SAAUpB,IAEZW,cAAA,UAAQO,KAAK,SAASN,UAAU,+BAA8BC,SAAC,cAIjEF,cAAA,OAAKC,UAAU,WAAUC,SAEtBrD,EAAQ6D,KAAI,SAACC,GAAG,OACfX,cAAA,OAAKC,UAAU,WAAUC,SACvBF,cAAA,OAAKY,IAAKD,EAAKE,IAAKF,KADSA,EAEzB,YAqCRR,eAAA,OAAKF,UAAU,mBAAkBC,SAAA,CAC/BF,cAAA,OAAKa,IAAI,eAAeZ,UAAU,eAAeW,IAAKE,IACtDd,cAAA,KACEC,UAAU,cACVc,KAAMjF,EACN0D,OAAO,SACPwB,IAAI,aAAYd,SAAA,aAAAnE,OACHF,YAKzB,ECxIAoF,IAASC,OACPlB,cAACmB,IAAMC,WAAU,CAAAlB,SACfF,cAAChE,EAAG,MAENqF,SAASC,eAAe,Q","file":"static/js/main.6f664b2d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.4844b78f.svg\";","import React, { useEffect, useState } from 'react';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport './App.css';\r\n\r\n// Constants\r\nconst TEST_GIFS = [\r\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\r\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\r\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\r\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\r\n]\r\nconst TWITTER_HANDLE = '_buildspace';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n  // State\r\nconst [walletAddress, setWalletAddress] = useState(null);\r\nconst [inputValue, setInputValue] = useState('');\r\nconst [gifList, setGifList] = useState([]);\r\n\r\n  // Actions\r\n  const checkIfWalletIsConnected = async () => {\r\n    if (window?.solana?.isPhantom) {\r\n      console.log('Phantom wallet found!');\r\n      const response = await window.solana.connect({ onlyIfTrusted: true });\r\n      console.log(\r\n        'Connected with Public Key:',\r\n        response.publicKey.toString()\r\n      );\r\n  \r\n      /*\r\n       * Set the user's publicKey in state to be used later!\r\n       */\r\n      setWalletAddress(response.publicKey.toString());\r\n    } else {\r\n      alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\r\n    }\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n  \r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      console.log('Connected with Public Key:', response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  };\r\n  const sendGif = async () => {\r\n    if (inputValue.length > 0) {\r\n      console.log('Gif link:', inputValue);\r\n      setGifList([...gifList, inputValue]);\r\n      setInputValue('');\r\n    } else {\r\n      console.log('Empty input. Try again.');\r\n    }\r\n  };\r\n  const onInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setInputValue(value);\r\n  };\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n  const renderConnectedContainer = () => (\r\n    <div className=\"connected-container\">\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n          sendGif();\r\n        }}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter gif link!\"\r\n          value={inputValue}\r\n          onChange={onInputChange}\r\n        />\r\n        <button type=\"submit\" className=\"cta-button submit-gif-button\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n      <div className=\"gif-grid\">\r\n        {/* Map through gifList instead of TEST_GIFS */}\r\n        {gifList.map((gif) => (\r\n          <div className=\"gif-item\" key={gif}>\r\n            <img src={gif} alt={gif} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n  // UseEffects\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener('load', onLoad);\r\n    return () => window.removeEventListener('load', onLoad);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log('Fetching GIF list...');\r\n      \r\n      // Call Solana program here.\r\n  \r\n      // Set state\r\n      setGifList(TEST_GIFS);\r\n    }\r\n  }, [walletAddress]);\r\n  return (\r\n    <div className=\"App\">\r\n\t\t\t{/* This was solely added for some styling fanciness */}\r\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\r\n        <div className=\"header-container\">\r\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\r\n          <p className=\"sub-text\">\r\n            View your GIF collection in the metaverse âœ¨\r\n          </p>\r\n          {/* Add the condition to show this only if we don't have a wallet address */}\r\n          {!walletAddress && renderNotConnectedContainer()}\r\n          {walletAddress && renderConnectedContainer()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built on @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}